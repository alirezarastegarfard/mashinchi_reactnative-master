apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

def marketApplicationId;
def marketpackage;
def marketid;

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    flavorDimensions "default"
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.dpa_me.mashinchi"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.1"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        config {
            keyAlias 'dpa developments'
            keyPassword '@dpadba@'
            storeFile file('../keystores/DPALock.jks')
            storePassword '@dpadba@'
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.config
        }
    }

    productFlavors {
        bazaar {
            marketid = "bazaar"
            marketApplicationId = "ir.cafebazaar.pardakht"
            marketpackage = "com.farsitel.bazaar"
            buildConfigField "String", "MARKET_APPLICATION_ID", "\"${marketApplicationId}\""
            buildConfigField "String", "MARKET_PACKAGE", "\"${marketpackage}\""
            buildConfigField "String", "MARKET_ID", "\"${marketid}\""
            signingConfig signingConfigs.config
            minSdkVersion 16
            targetSdkVersion 28
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }
        myket {
            marketid = "myket"
            marketApplicationId = "ir.mservices.market"
            marketpackage = "ir.mservices.market"
            buildConfigField "String", "MARKET_APPLICATION_ID", "\"${marketApplicationId}\""
            buildConfigField "String", "MARKET_PACKAGE", "\"${marketpackage}\""
            buildConfigField "String", "MARKET_ID", "\"${marketid}\""
            signingConfig signingConfigs.config
            minSdkVersion 16
            targetSdkVersion 28
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }
        iranapps {
            marketid = "iranapps"
            marketApplicationId = "ir.tgbs.iranapps.billing"
            marketpackage = "ir.tgbs.android.iranapp"
            buildConfigField "String", "MARKET_APPLICATION_ID", "\"${marketApplicationId}\""
            buildConfigField "String", "MARKET_PACKAGE", "\"${marketpackage}\""
            buildConfigField "String", "MARKET_ID", "\"${marketid}\""
            signingConfig signingConfigs.config
            minSdkVersion 16
            targetSdkVersion 28
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':react-native-device-info')
    implementation project(':@react-native-community_netinfo')
    implementation project(':@react-native-community_async-storage')
    implementation project(':react-native-fast-image')
    implementation project(':react-native-pushe')
    implementation project(':react-native-snackbar')
    implementation project(':react-native-fs')
    implementation project(':react-native-audio')
    implementation project(':react-native-sound')
    implementation project(':react-native-get-location')
    implementation project(':react-native-orientation-locker')
    implementation project(':react-native-fetch-blob')
    implementation project(':react-native-maps')
    implementation project(':react-native-exit-app')
    implementation project(':lottie-react-native')
    implementation project(':react-native-video')
    implementation project(':react-native-image-crop-picker')
    implementation(project(':react-native-maps')){
        exclude group: 'com.google.android.gms', module: 'play-services-base'
        exclude group: 'com.google.android.gms', module: 'play-services-maps'
    }
    implementation 'com.google.android.gms:play-services-base:16.1.0'
    implementation 'com.google.android.gms:play-services-maps:16.1.0'
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation 'com.android.support:multidex:1.0.1'
    implementation 'com.facebook.react:react-native:+'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
